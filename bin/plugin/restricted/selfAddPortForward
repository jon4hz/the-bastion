#! /usr/bin/env perl
# vim: set filetype=perl ts=4 sw=4 sts=4 et:
use common::sense;

use File::Basename;
use lib dirname(__FILE__) . '/../../../lib/perl';
use OVH::Result;
use OVH::Bastion;
use OVH::Bastion::Plugin qw( :DEFAULT help );
use OVH::Bastion::Plugin::ACL;

my $remainingOptions = OVH::Bastion::Plugin::begin(
    argv               => \@ARGV,
    header             => "add port forwarding access to your account",
    userAllowWildcards => 1,
    options            => {
        "remote-user=s"    => \my $remoteUser,
        "ssh-port=s"       => \my $sshPort,
        "forward-port=s"   => \my $forwardPort,
        "remote-port=s"    => \my $remotePort,      # deprecated, for backward compatibility
        "ttl=s"            => \my $ttl,
        "comment=s"        => \my $comment,
        "force-key=s"      => \my $forceKey,
        "force-password=s" => \my $forcePassword,
    },
    helptext => <<'EOF',
Add port forwarding access to your account

Usage: --osh SCRIPT_NAME --host HOST|IP [OPTIONS]

  --host HOST|IP|SUBNET        Specify the remote host to allow port forwarding to, either a HOST which will be resolved to an IP immediately,
                               or an IP, or a whole subnet using the PREFIX/SIZE notation
  --ssh-port PORT              Specify the SSH server port on the remote host [22]
  --forward-port PORT          Specify the service port to forward to [any port]
  --remote-port PORT           (deprecated) Same as --forward-port for backward compatibility
  --remote-user USER           Specify the remote user to allow forwarding as [any user]
  --ttl SECONDS|DURATION       Specify a TTL for this access (e.g. 1d7h5m)
  --comment '"TEXT"'           Specify a comment that'll be added to the access
  --force-key FINGERPRINT      Force use of specific SSH key (fingerprint)
  --force-password HASH        Force use of specific password (hash)

This command adds a port forwarding access to your account, allowing you to
create port forwarding tunnels to the specified remote host. Port forwarding
access is separate from regular SSH access.

- SSH port: The port where the SSH server runs on the target (usually 22)
- Forward port: The port of the service you want to access through the tunnel

Examples:
  --osh selfAddPortForward --host 192.168.1.10 --forward-port 80
  --osh selfAddPortForward --host db.example.com --remote-user mysql --ttl 1d
  --osh selfAddPortForward --host 10.0.0.5 --comment "Development server"
  --osh selfAddPortForward --host server.com --ssh-port 2222 --forward-port 8080
EOF
);

my $fnret;

if (!$ip) {
    help();
    osh_exit 'ERR_MISSING_PARAMETER', "Missing mandatory parameter 'host' or didn't resolve correctly";
}

# Handle backward compatibility: if --remote-port is used, use it as forward-port
if ($remotePort && !$forwardPort) {
    $forwardPort = $remotePort;
}

$fnret = OVH::Bastion::Plugin::ACL::check_portforward(
    remoteUser  => $remoteUser,
    sshPort     => $sshPort,
    forwardPort => $forwardPort,
);
if (not $fnret) {
    help();
    osh_exit($fnret);
}
$remoteUser  = $fnret->value->{'remoteUser'};
$sshPort     = $fnret->value->{'sshPort'};
$forwardPort = $fnret->value->{'forwardPort'};

# Check if port forwarding is enabled in configuration
my $fnret = OVH::Bastion::load_configuration();
if (!$fnret) {
    osh_exit 'ERR_CONFIGURATION', "Failed to load configuration";
}
my $config = $fnret->value;
if (!$config->{'portForwardingEnabled'}) {
    osh_exit 'ERR_FORBIDDEN', "Port forwarding feature is disabled on this bastion";
}

if ($ttl) {
    $fnret = OVH::Bastion::is_valid_ttl(ttl => $ttl);
    $fnret or osh_exit $fnret;
    $ttl = $fnret->value->{'seconds'};
}

# if no comment is specified, but we're adding the server by hostname,
# use it to craft a comment
if (!$comment && $host ne $ip) {
    $comment = "hostname=$host";
}

osh_info "Adding port forward access to $ip:"
  . ($sshPort     || '*') . "->"
  . ($forwardPort || '*') . " ("
  . ($remoteUser  || '*')
  . ") to your account...";

my @command = qw{ sudo -n -u allowkeeper -- /usr/bin/env perl -T };
push @command, $OVH::Bastion::BASEPATH . '/bin/helper/osh-accountModifyPortForward';
push @command, '--target',         'self';
push @command, '--action',         'add';
push @command, '--account',        $self;
push @command, '--remote-ip',      $ip;
push @command, '--remote-user',    $remoteUser    if $remoteUser;
push @command, '--ssh-port',       $sshPort       if $sshPort;
push @command, '--forward-port',   $forwardPort   if $forwardPort;
push @command, '--ttl',            $ttl           if $ttl;
push @command, '--comment',        $comment       if $comment;
push @command, '--force-key',      $forceKey      if $forceKey;
push @command, '--force-password', $forcePassword if $forcePassword;

osh_exit OVH::Bastion::helper(cmd => \@command);

#! /usr/bin/env perl
# vim: set filetype=perl ts=4 sw=4 sts=4 et:
use common::sense;

use File::Basename;
use lib dirname(__FILE__) . '/../../../lib/perl';
use OVH::Result;
use OVH::Bastion;
use OVH::Bastion::Plugin qw( :DEFAULT help );

my $remainingOptions = OVH::Bastion::Plugin::begin(
    argv     => \@ARGV,
    header   => "regenerate SSH port forwarding configurations",
    options  => {
        "account=s"      => \my $account,
        "group=s"        => \my $group,
        "all-accounts!"  => \my $all_accounts,
    },
    helptext => <<'EOF',
Regenerate SSH port forwarding configurations

Usage: --osh SCRIPT_NAME [OPTIONS]

  --account ACCOUNT     Regenerate SSH config for a specific account
  --group GROUP         Regenerate SSH configs for all accounts with access to a specific group
  --all-accounts        Regenerate SSH configs for all accounts
  
This command regenerates the SSH daemon configuration files that control which
port forwarding destinations each user is allowed to access. These configs are
automatically updated when port forwarding access is modified, but this command
can be used for manual regeneration in case of configuration drift or for
maintenance purposes.

The generated configurations are stored in /etc/ssh/sshd_config.forward.d/ and
included by the main SSH daemon configuration.

Examples:
  --osh adminRegenSSHPFConfigs --account john_doe
  --osh adminRegenSSHPFConfigs --group developers  
  --osh adminRegenSSHPFConfigs --all-accounts
EOF
);

my $fnret;

# Check parameter combinations
my $param_count = ($account ? 1 : 0) + ($group ? 1 : 0) + ($all_accounts ? 1 : 0);
if ($param_count != 1) {
    help();
    osh_exit 'ERR_INVALID_PARAMETER', "You must specify exactly one of --account, --group, or --all-accounts";
}

# Check if port forwarding is enabled
$fnret = OVH::Bastion::load_configuration();
if (!$fnret) {
    osh_exit 'ERR_CONFIGURATION', "Failed to load configuration";
}
my $config = $fnret->value;

if (!$config->{'portForwardingEnabled'}) {
    osh_exit 'ERR_FORBIDDEN', "Port forwarding feature is disabled on this bastion";
}

if (!$config->{'portForwardingSSHConfigEnabled'}) {
    osh_exit 'ERR_FORBIDDEN', "SSH port forwarding config generation is disabled on this bastion";
}

# Execute based on parameters
if ($account) {
    # Validate account
    $fnret = OVH::Bastion::is_bastion_account_valid_and_existing(account => $account);
    $fnret or osh_exit $fnret;
    $account = $fnret->value->{'account'};
    
    osh_info "Regenerating SSH port forwarding config for account $account...";
    
    my @command = qw{ sudo -n -u root -- /usr/bin/env perl -T };
    push @command, $OVH::Bastion::BASEPATH . '/bin/helper/osh-genSSHPFConfigs';
    push @command, '--account', $account;
    
    osh_exit OVH::Bastion::helper(cmd => \@command);
}
elsif ($group) {
    # Validate group
    if ($group !~ /^key/) {
        $group = "key$group";
    }
    $fnret = OVH::Bastion::is_valid_group_and_existing(group => $group, groupType => 'key');
    $fnret or osh_exit $fnret;
    my $shortGroup = $fnret->value->{'shortGroup'};
    
    osh_info "Regenerating SSH port forwarding configs for all accounts with access to group $shortGroup...";
    
    my @command = qw{ sudo -n -u root -- /usr/bin/env perl -T };
    push @command, $OVH::Bastion::BASEPATH . '/bin/helper/osh-regenSSHPFConfigsForGroup';
    push @command, '--group', $shortGroup;
    
    osh_exit OVH::Bastion::helper(cmd => \@command);
}
elsif ($all_accounts) {
    osh_info "Regenerating SSH port forwarding configs for all accounts...";
    
    my @command = qw{ sudo -n -u root -- /usr/bin/env perl -T };
    push @command, $OVH::Bastion::BASEPATH . '/bin/helper/osh-genSSHPFConfigs';
    push @command, '--all-accounts';
    
    osh_exit OVH::Bastion::helper(cmd => \@command);
}
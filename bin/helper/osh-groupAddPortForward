#! /usr/bin/perl -T
# vim: set filetype=perl ts=4 sw=4 sts=4 et:
# KEYSUDOERS # as an aclkeeper, we can add/del a server from the group port forward list in /home/%GROUP%/allowed.forward
# KEYSUDOERS SUPEROWNERS, %%GROUP%-aclkeeper  ALL=(%GROUP%)     NOPASSWD: /usr/bin/env perl -T %BASEPATH%/bin/helper/osh-groupAddPortForward --group %GROUP% *
# FILEMODE 0755
# FILEOWN 0 0

#>HEADER
use common::sense;
use Getopt::Long qw(:config no_auto_abbrev no_ignore_case);

use File::Basename;
use lib dirname(__FILE__) . '/../../lib/perl';
use OVH::Result;
use OVH::Bastion;
use OVH::Bastion::Helper;

# Fetch command options
my $fnret;
my ($result,   @optwarns);
my ($group,    $remote_ip, $remote_user, $ssh_port, $forward_port, $action, $ttl, $comment);
my ($forceKey, $forcePassword);
eval {
    local $SIG{__WARN__} = sub { push @optwarns, shift };
    $result = GetOptions(
        "group=s"          => sub { $group         //= $_[1] },
        "remote-ip=s"      => sub { $remote_ip     //= $_[1] },
        "remote-user=s"    => sub { $remote_user   //= $_[1] },
        "ssh-port=s"       => sub { $ssh_port      //= $_[1] },
        "forward-port=s"   => sub { $forward_port  //= $_[1] },
        "action=s"         => sub { $action        //= $_[1] },
        "ttl=s"            => sub { $ttl           //= $_[1] },
        "comment=s"        => sub { $comment       //= $_[1] },
        "force-key=s"      => sub { $forceKey      //= $_[1] },
        "force-password=s" => sub { $forcePassword //= $_[1] },
    );
};
if ($@) { die $@ }

if (!$result) {
    local $" = ", ";
    HEXIT('ERR_BAD_OPTIONS', msg => "Error parsing options: @optwarns");
}

OVH::Bastion::Helper::check_spurious_args();

if (not $action or not $remote_ip or not $group) {
    HEXIT('ERR_MISSING_PARAMETER', msg => "Missing argument 'action' or 'remote_ip' or 'group'");
}

# Check if port forwarding is enabled in configuration
$fnret = OVH::Bastion::load_configuration();
if (!$fnret) {
    HEXIT('ERR_CONFIGURATION', msg => "Failed to load configuration");
}
my $config = $fnret->value;
if (!$config->{'portForwardingEnabled'}) {
    HEXIT('ERR_FORBIDDEN', msg => "Port forwarding feature is disabled on this bastion");
}

#<HEADER

#>PARAMS:ACTION
if (not grep { $action eq $_ } qw{ add del }) {
    return R('ERR_INVALID_PARAMETER', msg => "expected 'add' or 'del' as an action");
}

#<PARAMS:ACTION

#>PARAMS:GROUP
my $group_check = OVH::Bastion::is_valid_group_and_existing(group => $group, groupType => "key");
if (!$group_check) {
    HEXIT('ERR_INVALID_GROUP', msg => "Invalid group '" . $group . "': " . $group_check->msg);
}
$group = $group_check->value->{'group'};
my $groupName = $group_check->value->{'shortGroup'};
#<PARAMS:GROUP

#>CODE
my $machine = "$remote_ip:" . ($ssh_port || '*') . "->" . ($forward_port || '*') . " (" . ($remote_user || '*') . ")";

# portforward_modify validates all its parameters, don't do it ourselves here for clarity
$fnret = OVH::Bastion::portforward_modify(
    way           => 'group',
    action        => $action,
    group         => $group,
    remote_ip     => $remote_ip,
    remote_user   => $remote_user,
    ssh_port      => $ssh_port,
    forward_port  => $forward_port,
    ttl           => $ttl,
    comment       => $comment,
    forceKey      => $forceKey,
    forcePassword => $forcePassword,
);
if ($fnret->err eq 'OK') {
    # Regenerate SSH port forwarding configs for all accounts that have access to this group if SSH config generation is enabled
    my $config_check = OVH::Bastion::load_configuration();
    if ($config_check && $config_check->value && $config_check->value->{'portForwardingSSHConfigEnabled'}) {
        my $ssh_config_fnret = OVH::Bastion::helper(
            cmd => [$OVH::Bastion::BASEPATH . '/bin/helper/osh-regenSSHPFConfigsForGroup', '--group', $groupName]);
        if (!$ssh_config_fnret) {
            osh_warn("Failed to regenerate SSH port forwarding configs for group $groupName");
        }
    }

    my $ttlmsg = $ttl ? ' (expires in ' . OVH::Bastion::duration2human(seconds => $ttl)->value->{'human'} . ')' : '';
    HEXIT(
        'OK',
        value => {
            action       => $action,
            group        => $groupName,
            remote_ip    => $remote_ip,
            remote_user  => $remote_user,
            ssh_port     => $ssh_port,
            forward_port => $forward_port,
            ttl          => $ttl,
            comment      => $comment
        },
        msg => $action eq 'add'
        ? "Port forward access to $machine was added to group $groupName$ttlmsg"
        : "Port forward access to $machine was removed from group $groupName$ttlmsg"
    );
}
else {
    HEXIT($fnret);
}

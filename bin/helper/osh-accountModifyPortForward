#! /usr/bin/perl -T
# vim: set filetype=perl ts=4 sw=4 sts=4 et:
# NEEDGROUP osh-selfAddPortForward
# SUDOERS %osh-selfAddPortForward    ALL=(allowkeeper) NOPASSWD:/usr/bin/env perl -T /opt/bastion/bin/helper/osh-accountModifyPortForward --target self --action add *
# FILEMODE 0750
# FILEOWN 0 allowkeeper
#
# NEEDGROUP osh-accountAddPortForward
# SUDOERS %osh-accountAddPortForward ALL=(allowkeeper) NOPASSWD:/usr/bin/env perl -T /opt/bastion/bin/helper/osh-accountModifyPortForward --target any --action add *
# FILEMODE 0750
# FILEOWN 0 allowkeeper
#
# NEEDGROUP osh-selfDelPortForward
# SUDOERS %osh-selfDelPortForward    ALL=(allowkeeper) NOPASSWD:/usr/bin/env perl -T /opt/bastion/bin/helper/osh-accountModifyPortForward --target self --action del *
# FILEMODE 0750
# FILEOWN 0 allowkeeper
#
# NEEDGROUP osh-accountDelPortForward
# SUDOERS %osh-accountDelPortForward ALL=(allowkeeper) NOPASSWD:/usr/bin/env perl -T /opt/bastion/bin/helper/osh-accountModifyPortForward --target any --action del *
# FILEMODE 0750
# FILEOWN 0 allowkeeper

#>HEADER
use common::sense;
use Getopt::Long qw(:config no_auto_abbrev no_ignore_case);

use File::Basename;
use lib dirname(__FILE__) . '/../../lib/perl';
use OVH::Bastion;
use OVH::Bastion::Helper;

# Fetch command options
my $fnret;
my ($result, @optwarns);
my ($account, $remote_ip, $remote_user, $ssh_port, $forward_port, $action, $ttl, $target, $comment);
my ($widestV4Prefix, $widestV6Prefix, $forceKey, $forcePassword);
eval {
    local $SIG{__WARN__} = sub { push @optwarns, shift };
    $result = GetOptions(
        "account=s"          => sub { $account //= $_[1] },
        "remote-ip=s"        => sub { $remote_ip //= $_[1] },
        "remote-user=s"      => sub { $remote_user //= $_[1] },
        "ssh-port=s"         => sub { $ssh_port //= $_[1] },
        "forward-port=s"     => sub { $forward_port //= $_[1] },
        "action=s"           => sub { $action //= $_[1] },
        "ttl=s"              => sub { $ttl //= $_[1] },
        "target=s"           => sub { $target //= $_[1] },
        "comment=s"          => sub { $comment //= $_[1] },
        "widest-v4-prefix=s" => sub { $widestV4Prefix //= $_[1] },
        "widest-v6-prefix=s" => sub { $widestV6Prefix //= $_[1] },
        "force-key=s"        => sub { $forceKey //= $_[1] },
        "force-password=s"   => sub { $forcePassword //= $_[1] },
    );
};
if ($@) { die $@ }

if (!$result) {
    local $" = ", ";
    HEXIT('ERR_BAD_OPTIONS', msg => "Error parsing options: @optwarns");
}

OVH::Bastion::Helper::check_spurious_args();

if (not $action or not $remote_ip or not $account or not $target) {
    HEXIT('ERR_MISSING_PARAMETER', msg => "Missing argument 'action' or 'remote_ip' or 'account' or 'target'");
}

# Check if port forwarding is enabled in configuration
my $fnret = OVH::Bastion::load_configuration();
if (!$fnret) {
    HEXIT('ERR_CONFIGURATION', msg => "Failed to load configuration");
}
my $config = $fnret->value;
if (!$config->{'portForwardingEnabled'}) {
    HEXIT('ERR_FORBIDDEN', msg => "Port forwarding feature is disabled on this bastion");
}

#<HEADER

not defined $account and $account = $self;

#>RIGHTSCHECK
if ($target eq 'self' && $self ne $account) {
    HEXIT('ERR_SECURITY_VIOLATION',
        msg => "Attempted to modify another account while you're only allowed to do it on yourself");
}

#<RIGHTSCHECK

#>PARAMS:ACTION
if (not grep { $action eq $_ } qw{ add del }) {
    return R('ERR_INVALID_PARAMETER', msg => "expected 'add' or 'del' as an action");
}

#<PARAMS:ACTION

#>CODE
my $machine = "$remote_ip:" . ($ssh_port || '*') . "->" . ($forward_port || '*') . " (" . ($remote_user || '*') . ")";

# portforward_modify validates all its parameters, don't do it ourselves here for clarity
$fnret = OVH::Bastion::portforward_modify(
    way             => 'personal',
    action          => $action,
    account         => $account,
    remote_ip       => $remote_ip,
    remote_user     => $remote_user,
    ssh_port        => $ssh_port,
    forward_port    => $forward_port,
    ttl             => $ttl,
    comment         => $comment,
    widestV4Prefix  => $widestV4Prefix,
    widestV6Prefix  => $widestV6Prefix,
    forceKey        => $forceKey,
    forcePassword   => $forcePassword,
);
if ($fnret->err eq 'OK') {
    # Regenerate SSH port forwarding config for this account if SSH config generation is enabled
    my $config_check = OVH::Bastion::load_configuration();
    if ($config_check && $config_check->value && $config_check->value->{'portForwardingSSHConfigEnabled'}) {
        # Validate and untaint the account name before calling the helper
        my $account_check = OVH::Bastion::is_bastion_account_valid_and_existing(account => $account);
        if ($account_check) {
            my $untainted_account = $account_check->value->{'account'};
            my $ssh_config_fnret = OVH::Bastion::helper(
                cmd => ['sudo', '-n', '/usr/bin/env', 'perl', '-T', $OVH::Bastion::BASEPATH . '/bin/helper/osh-genSSHPFConfigs', '--account', $untainted_account]
            );
            if (!$ssh_config_fnret) {
                osh_warn("Failed to regenerate SSH port forwarding config for account $account");
            }
        }
        else {
            osh_warn("Cannot regenerate SSH config for invalid account: $account");
        }
    }
    
    my $ttlmsg = $ttl ? ' (expires in ' . OVH::Bastion::duration2human(seconds => $ttl)->value->{'human'} . ')' : '';
    HEXIT(
        'OK',
        value => {
            action       => $action,
            account      => $account,
            remote_ip    => $remote_ip,
            remote_user  => $remote_user,
            ssh_port     => $ssh_port,
            forward_port => $forward_port,
            ttl          => $ttl,
            comment      => $comment
        },
        msg => $action eq 'add'
        ? "Port forward access to $machine was added to account $account$ttlmsg"
        : "Port forward access to $machine was removed from account $account$ttlmsg"
    );
}
else {
    HEXIT($fnret);
}